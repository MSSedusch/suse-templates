{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string"
        },
        "sapSystemId": {
            "type": "string",
            "defaultValue": "TST"
        },
        "osType": {
            "type": "string",
            "allowedValues": [
                "SLES for SAP 12 SP3 (Premium)"
            ],
            "defaultValue": "SLES for SAP 12 SP3 (Premium)",
            "metadata": {
                "description": "The type of the operating system you want to deploy."
            }
        },
        "size": {
            "type": "string",
            "allowedValues": [
                "Demo",
                "Small",
                "Medium",
                "Large"
            ],
            "defaultValue": "Demo",
            "metadata": {
                "description": "The type of the operating system you want to deploy."
            }
        },
        "nodeCount": {
            "type": "int",
            "minValue": 2,
            "maxValue": 8
        },
        "stackType": {
            "type": "string",
            "allowedValues": [
                "ABAP",
                "JAVA",
                "ABAP+JAVA"
            ],
            "defaultValue": "ABAP+JAVA",
            "metadata": {
                "description": "The type of the operating system you want to deploy."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "sshKeyData": {
            "type": "string",
            "defaultValue": ""
        },
        "createVNET": {
            "type": "bool",
            "defaultValue": true
        },
        "vnetResourceGroup": {
            "defaultValue": "[resourceGroup().name]",
            "type": "string"
        },
        "vnetResourceGroupSR": {
            "defaultValue": "[resourceGroup().name]",
            "type": "string"
        },
        "addressPrefix": {
            "defaultValue": "10.0.0.0/16",
            "type": "string"
        },
        "subnetName": {
            "defaultValue": "subnet",
            "type": "string"
        },
        "subnetNameSR": {
            "defaultValue": "subnet-sr",
            "type": "string"
        },
        "subnetPrefix": {
            "defaultValue": "10.0.0.0/24",
            "type": "string"
        },
        "subnetPrefixSR": {
            "defaultValue": "10.0.1.0/24",
            "type": "string"
        },
        "nsgName": {
            "defaultValue": "nsg",
            "type": "string"
        },
        "nsgNameSR": {
            "defaultValue": "nsg-sr",
            "type": "string"
        },
        "vnetName": {
            "defaultValue": "vnet",
            "type": "string"
        },
        "vnetNameSR": {
            "defaultValue": "vnet",
            "type": "string"
        },
        "appAVSetName": {
            "defaultValue": "app-av",
            "type": "string"
        },
        "appNICName": {
            "defaultValue": "app-nic",
            "type": "string"
        },
        "appVMName": {
            "defaultValue": "app-vm",
            "type": "string"
        },
        "xscsPIPName": {
            "defaultValue": "sap-pip",
            "type": "string"
        },
        "xscsNICName": {
            "defaultValue": "sap-nic",
            "type": "string"
        },
        "xscsLoadBalancerName": {
            "defaultValue": "sap-lb",
            "type": "string"
        },
        "xscsVMName": {
            "defaultValue": "sap-vm",
            "type": "string"
        },
        "ascsInstanceNumber": {
            "defaultValue": 0,
            "type": "int"
        },
        "ascsInstanceNumberERS": {
            "defaultValue": 10,
            "type": "int"
        },
        "scsInstanceNumber": {
            "defaultValue": 1,
            "type": "int"
        },
        "scsInstanceNumberERS": {
            "defaultValue": 11,
            "type": "int"
        },
        "hNICName": {
            "defaultValue": "hana-nic",
            "type": "string"
        },
        "hNICNameSR": {
            "defaultValue": "hana-nic-sr",
            "type": "string"
        },
        "hLoadBalancerName": {
            "defaultValue": "hana-lb",
            "type": "string"
        },
        "hVMName": {
            "defaultValue": "hana-vm",
            "type": "string"
        },
        "dbInstanceNumber": {
            "defaultValue": 50,
            "type": "int"
        },
        "_SUSETags": {
            "type": "object",
            "defaultValue": {
                "provider": "b0d27bab-bf43-4cad-9bf5-40a8041d59b8"
            }
        }
    },
    "variables": {
        "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
        "sshKeysArrayKey": [
            {
                "path": "[variables('sshKeyPath')]",
                "keyData": "[parameters('sshKeyData')]"
            }
        ],
        "sshKeysArrayEmpty": [
        ],
        "sshKeysArray": "[if(equals(length(parameters('sshKeyData')), 0), variables('sshKeysArrayEmpty'), variables('sshKeysArrayKey'))]",
        "internalSubnetId": "[resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
        "internalSubnetIdSR": "[resourceId(parameters('vnetResourceGroupSR'),'Microsoft.Network/virtualNetworks/subnets', parameters('vnetNameSR'), parameters('subnetNameSR'))]",
        "lbrulePrefix": "lb-",
        "images": {
            "SLES for SAP 12 SP3 (Premium)": {
                "sku": "12-SP3",
                "offer": "SLES-SAP",
                "publisher": "SUSE",
                "version": "latest",
                "OSType": "Linux"
            }
        },
        "sizes": {
            "Demo": {
                "hana": {
                    "vmSize": "Standard_E4s_v3",
                    "disks": [
                        {
                            "lun": 0,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 1,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 2,
                            "caching": "None",
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 3,
                            "caching": "None",
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 4,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 5,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 6,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 7,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "-luns '0,1#2,3#4#5#6,7' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup'  -sizes '100#100#100#100#100'",
                    "useFastNetwork": false
                },
                "xscs": {
                    "vmSize": "Standard_D2s_v3",
                    "disks": [],
                    "scriptArguments": "-luns",
                    "useFastNetwork": false
                },
                "apps": {
                    "vmSize": "Standard_D2s_v3",
                    "vmCount": 2,
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "[concat('-luns 0 -names sap -paths /usr/sap/', parameters('sapSystemId'))]",
                    "useFastNetwork": false
                }
            },
            "Small": {
                "hana": {
                    "vmSize": "Standard_E64s_v3",
                    "disks": [
                        {
                            "lun": 0,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 1,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 2,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 3,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 4,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 64
                        },
                        {
                            "lun": 5,
                            "caching": "None",
                            "createOption": "Empty",
                            "diskSizeGB": 1024
                        }
                    ],
                    "scriptArguments": "-luns '0,1,2#3#4#5' -names 'datalog#shared#usrsap#backup' -paths '/hana/data,/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '70,100#100#100#100'",
                    "useFastNetwork": true
                },
                "xscs": {
                    "vmSize": "Standard_D2s_v3",
                    "disks": [],
                    "scriptArguments": "-luns",
                    "useFastNetwork": false
                },
                "apps": {
                    "vmSize": "Standard_E64s_v3",
                    "vmCount": 5,
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "[concat('-luns 0 -names sap -paths /usr/sap/', parameters('sapSystemId'))]",
                    "useFastNetwork": true
                }
            },
            "Medium": {
                "hana": {
                    "vmSize": "Standard_M64s",
                    "disks": [
                        {
                            "lun": 0,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 1,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 2,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 3,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 4,
                            "caching": "None",
                            "writeAcceleratorEnabled": "true",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 5,
                            "caching": "None",
                            "writeAcceleratorEnabled": "true",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 6,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 1024
                        },
                        {
                            "lun": 7,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 64
                        },
                        {
                            "lun": 8,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 1024
                        },
                        {
                            "lun": 9,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 1024
                        }
                    ],
                    "scriptArguments": "-luns '0,1,2,3#4,5#6#7#8,9' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '100#100#100#100#100'",
                    "useFastNetwork": true
                },
                "xscs": {
                    "vmSize": "Standard_D2s_v3",
                    "disks": [],
                    "scriptArguments": "-luns",
                    "useFastNetwork": false
                },
                "apps": {
                    "vmSize": "Standard_E64s_v3",
                    "vmCount": 5,
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "[concat('-luns 0 -names sap -paths /usr/sap/', parameters('sapSystemId'))]",
                    "useFastNetwork": true
                }
            },
            "Large": {
                "hana": {
                    "vmSize": "Standard_M128s",
                    "disks": [
                        {
                            "lun": 0,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 1024
                        },
                        {
                            "lun": 1,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 1024
                        },
                        {
                            "lun": 2,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 1024
                        },                        
                        {
                            "lun": 3,
                            "caching": "None",
                            "writeAcceleratorEnabled": "true",
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 4,
                            "caching": "None",
                            "writeAcceleratorEnabled": "true",  
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 5,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 1024
                        },
                        {
                            "lun": 6,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 64
                        },
                        {
                            "lun": 7,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 2048
                        },
                        {
                            "lun": 8,
                            "caching": "ReadOnly",
                            "createOption": "Empty",
                            "diskSizeGB": 2048
                        }
                    ],
                    "scriptArguments": "-luns '0,1,2#3,4#5#6#7,8' -names 'data#log#shared#usrsap#backup' -paths '/hana/data#/hana/log#/hana/shared#/usr/sap#/hana/backup' -sizes '100#100#100#100#100'",
                    "useFastNetwork": true
                },
                "xscs": {
                    "vmSize": "Standard_D2s_v3",
                    "disks": [],
                    "scriptArguments": "-luns",
                    "useFastNetwork": false
                },
                "apps": {
                    "vmSize": "Standard_E64s_v3",
                    "vmCount": 10,
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "[concat('-luns 0 -names sap -paths /usr/sap/', parameters('sapSystemId'))]",
                    "useFastNetwork": true
                }
            }
        },
        "lbIdleTimeoutInMinutes": 30,
        "appvmCount": "[variables('sizes')[parameters('size')].apps.vmCount]",
        "appOSDiskCaching": "ReadWrite",
        "appOSDiskStorageType": "Premium_LRS",
        "ersLoadBalancerFrontend": "ersfrontend",
        "ersBackendPool": "ersbackend",
        "ersProbePort": "ersprobe",
        "ersProbePortInternal": "[add(62100, parameters('ascsInstanceNumberERS'))]",
        "xscsLoadBalancerFrontend": "xscsfrontend",
        "xscsBackendPool": "xscsbackend",
        "xscsProbePort": "xscsprobe",
        "xscsProbePortInternal": "[add(62000, parameters('ascsInstanceNumber'))]",
        "xscsvmCount": 2,
        "xscsOSDiskCaching": "ReadWrite",
        "xscsOSDiskStorageType": "Premium_LRS",
        "ascsLoadBalancingRulesERS": [
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3300, parameters('ascsInstanceNumberERS'))]",
                    "backendPort": "[add(3300, parameters('ascsInstanceNumberERS'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '33', padLeft(parameters('ascsInstanceNumberERS'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50013, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50013, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumberERS'), 2, '0'), '13')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50014, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50014, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumberERS'), 2, '0'), '14')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50016, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50016, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumberERS'), 2, '0'), '16')]"
            }
        ],
        "scsLoadBalancingRulesERS": [
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3300, parameters('scsInstanceNumberERS'))]",
                    "backendPort": "[add(3300, parameters('scsInstanceNumberERS'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '33', padLeft(parameters('scsInstanceNumberERS'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50013, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50013, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumberERS'), 2, '0'), '13')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50014, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50014, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumberERS'), 2, '0'), '14')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50016, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50016, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumberERS'), 2, '0'), '16')]"
            }
        ],
        "ascsLoadBalancingRules": [
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3200, parameters('ascsInstanceNumber'))]",
                    "backendPort": "[add(3200, parameters('ascsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '32', padLeft(parameters('ascsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3600, parameters('ascsInstanceNumber'))]",
                    "backendPort": "[add(3600, parameters('ascsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '36', padLeft(parameters('ascsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3900, parameters('ascsInstanceNumber'))]",
                    "backendPort": "[add(3900, parameters('ascsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '39', padLeft(parameters('ascsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(8100, parameters('ascsInstanceNumber'))]",
                    "backendPort": "[add(8100, parameters('ascsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '81', padLeft(parameters('ascsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50013, mul(parameters('ascsInstanceNumber'), 100))]",
                    "backendPort": "[add(50013, mul(parameters('ascsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumber'), 2, '0'), '13')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50014, mul(parameters('ascsInstanceNumber'), 100))]",
                    "backendPort": "[add(50014, mul(parameters('ascsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumber'), 2, '0'), '14')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50016, mul(parameters('ascsInstanceNumber'), 100))]",
                    "backendPort": "[add(50016, mul(parameters('ascsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumber'), 2, '0'), '16')]"
            }
        ],
        "scsLoadBalancingRules": [
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3200, parameters('scsInstanceNumber'))]",
                    "backendPort": "[add(3200, parameters('scsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '32', padLeft(parameters('scsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3300, parameters('scsInstanceNumber'))]",
                    "backendPort": "[add(3300, parameters('scsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '33', padLeft(parameters('scsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3900, parameters('scsInstanceNumber'))]",
                    "backendPort": "[add(3900, parameters('scsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '39', padLeft(parameters('scsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(8100, parameters('scsInstanceNumber'))]",
                    "backendPort": "[add(8100, parameters('scsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '81', padLeft(parameters('scsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50013, mul(parameters('scsInstanceNumber'), 100))]",
                    "backendPort": "[add(50013, mul(parameters('scsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumber'), 2, '0'), '13')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50014, mul(parameters('scsInstanceNumber'), 100))]",
                    "backendPort": "[add(50014, mul(parameters('scsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumber'), 2, '0'), '14')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50016, mul(parameters('scsInstanceNumber'), 100))]",
                    "backendPort": "[add(50016, mul(parameters('scsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumber'), 2, '0'), '16')]"
            }
        ],
        "loadBalancingRulesERS": {
            "ABAP": "[variables('ascsLoadBalancingRulesERS')]",
            "JAVA": "[variables('scsLoadBalancingRulesERS')]",
            "ABAP+JAVA": "[concat(variables('ascsLoadBalancingRulesERS'), variables('scsLoadBalancingRulesERS'))]"
        },
        "xscsLoadBalancingRules": {
            "ABAP": "[variables('ascsLoadBalancingRules')]",
            "JAVA": "[variables('scsLoadBalancingRules')]",
            "ABAP+JAVA": "[concat(variables('ascsLoadBalancingRules'), variables('scsLoadBalancingRules'))]"
        },
        "xscsERSLoadBalancingRules": "[concat(variables('xscsLoadBalancingRules')[parameters('stackType')], variables('loadBalancingRulesERS')[parameters('stackType')])]",
        "hLoadBalacingRules":[
            {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('hLoadBalancerName'), variables('hBackendPool'))]"
            }
        ],
        "hLoadBalancerFrontend": "frontend",
        "hBackendPool": "backend",
        "hProbePort": "probe",
        "hProbePortInternal": "[add(62500, parameters('dbInstanceNumber'))]",
        "hOSDiskCaching": "ReadWrite",
        "hOSDiskStorageType": "Premium_LRS",
        "nfsvmCount": 2,
        "nfsLoadBalancerFrontend": "frontend",
        "nfsBackendPool": "backend",
        "nfsProbePort": "probe",
        "nfsProbePortInternal": 61000,
        "nfsOSDiskCaching": "ReadWrite",
        "nfsOSDiskStorageType": "Premium_LRS"
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(parameters('nsgName'))]",
            "apiVersion": "2018-04-01",
            "location": "[parameters('location')]",
            "condition": "[parameters('createVNET')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "Allow SSH Subnet",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(parameters('nsgNameSR'))]",
            "apiVersion": "2018-04-01",
            "location": "[parameters('location')]",
            "condition": "[parameters('createVNET')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "securityRules": [                    
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('vnetName')]",
            "apiVersion": "2018-04-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', parameters('nsgName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', parameters('nsgNameSR'))]"
            ],
            "condition": "[parameters('createVNET')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('subnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                            }
                        }
                    },
                    {
                        "name": "[parameters('subnetNameSR')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnetPrefixSR')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgNameSR'))]"
                            }
                        }
                    }
                ]
            }
        },        
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('xscsPIPName')]",
            "apiVersion": "2018-04-01",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[parameters('location')]",            
            "condition": "[parameters('createVNET')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[parameters('xscsNICName')]",
            "apiVersion": "2017-06-01",            
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('xscsPIPName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[parameters('location')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": "[if(parameters('createVNET'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/publicIPAddresses', parameters('xscsPIPName')) ,'\"}')), json('null'))]",
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[variables('sizes')[parameters('size')].xscs.useFastNetwork]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[parameters('xscsVMName')]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', parameters('xscsNICName'))]"
            ],
            "apiVersion": "2017-12-01",
            "location": "[parameters('location')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('sizes')[parameters('size')].xscs.vmSize]"
                },
                "osProfile": {
                    "computerName": "[parameters('xscsVMName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "[if(equals(length(parameters('sshKeyData')), 0), bool('false'), bool('true'))]",
                        "ssh": {
                            "publicKeys": "[variables('sshKeysArray')]"
                        }
                    },
                    "customData": "IyEvYmluL2Jhc2gKCmZ1bmN0aW9uIGxvZygpCnsKICBtZXNzYWdlPSRACiAgZWNobyAiJG1lc3NhZ2UiCiAgZWNobyAiJG1lc3NhZ2UiID4+IC92YXIvbG9nL3NhcGNvbmZpZ2NyZWF0ZQp9Cgpsb2cgJEA="
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('images')[parameters('osType')].publisher]",
                        "offer": "[variables('images')[parameters('osType')].offer]",
                        "sku": "[variables('images')[parameters('osType')].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(parameters('xscsVMName'), '-osdisk')]",
                        "caching": "[variables('xscsOSDiskCaching')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('xscsOSDiskStorageType')]"
                        }
                    },
                    "dataDisks": "[variables('sizes')[parameters('size')].xscs.disks]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('xscsNICName')))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('xscsVMName'), '/', 'CustomScript')]",
            "apiVersion": "2017-12-01",            
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', parameters('xscsVMName'))]"
            ],
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [],
                    "commandToExecute": "[concat('while [ ! -f /var/lib/waagent/CustomData ]; do sleep 1; done;sleep 10;cat /var/lib/waagent/CustomData | base64 --decode | sh -s -- ', variables('sizes')[parameters('size')].xscs.scriptArguments)]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('hNICName'), '-', copyIndex())]",
            "apiVersion": "2017-06-01",
            "copy": {
                "name": "hNICLoop",
                "count": "[parameters('nodeCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[parameters('location')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[variables('sizes')[parameters('size')].hana.useFastNetwork]"
            }
        },        
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('hNICNameSR'), '-', copyIndex())]",
            "apiVersion": "2017-06-01",
            "copy": {
                "name": "hNICLoopSR",
                "count": "[parameters('nodeCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[parameters('location')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('internalSubnetIdSR')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[variables('sizes')[parameters('size')].hana.useFastNetwork]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('hVMName'), '-', copyIndex())]",
            "copy": {
                "name": "hVMLoop",
                "count": "[parameters('nodeCount')]"
            },
            "dependsOn": [
                "hNICLoop",
                "hNICLoopSR"
            ],
            "apiVersion": "2017-12-01",
            "location": "[parameters('location')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('sizes')[parameters('size')].hana.vmSize]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('hVMName'), '-', copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "[if(equals(length(parameters('sshKeyData')), 0), bool('false'), bool('true'))]",
                        "ssh": {
                            "publicKeys": "[variables('sshKeysArray')]"
                        }
                    },
                    "customData": "IyEvYmluL2Jhc2gKCmZ1bmN0aW9uIGxvZygpCnsKICBtZXNzYWdlPSRACiAgZWNobyAiJG1lc3NhZ2UiCiAgZWNobyAiJG1lc3NhZ2UiID4+IC92YXIvbG9nL3NhcGNvbmZpZ2NyZWF0ZQp9CgpmdW5jdGlvbiBhZGR0b2ZzdGFiKCkKewogIGxvZyAiYWRkdG9mc3RhYiIKICBwYXJ0UGF0aD0kMQogIG1vdW50PSQyCiAgCiAgbG9jYWwgYmxraWQ9JCgvc2Jpbi9ibGtpZCAkcGFydFBhdGgpCiAgCiAgaWYgW1sgJGJsa2lkID1+ICBVVUlEPVwiKC57MzZ9KVwiIF1dCiAgdGhlbgogIAogICAgbG9nICJBZGRpbmcgZnN0YWIgZW50cnkiCiAgICBsb2NhbCB1dWlkPSR7QkFTSF9SRU1BVENIWzFdfTsKICAgIGxvY2FsIG1vdW50Q21kPSIiCiAgICBsb2cgImFkZGluZyBmc3RhYiBlbnRyeSIKICAgIG1vdW50Q21kPSIvZGV2L2Rpc2svYnktdXVpZC8kdXVpZCAkbW91bnQgeGZzICBkZWZhdWx0cyxub2ZhaWwgIDAgIDIiCiAgICBlY2hvICIkbW91bnRDbWQiID4+IC9ldGMvZnN0YWIKICAgICQobW91bnQgJHBhcnRQYXRoICRtb3VudCkKICAKICBlbHNlCiAgICBsb2cgIm5vIFVVSUQgZm91bmQiCiAgICBleGl0IC0xOwogIGZpCiAgCiAgbG9nICJhZGR0b2ZzdGFiIGRvbmUiCn0KCmZ1bmN0aW9uIGdldGRldmljZXBhdGgoKQp7CgogIGxvZyAiZ2V0ZGV2aWNlcGF0aCIKICBnZXRkZXZpY2VwYXRocmVzdWx0PSIiCiAgbG9jYWwgbHVuPSQxCiAgbG9jYWwgcmVhZGxpbmtPdXRwdXQ9JChyZWFkbGluayAvZGV2L2Rpc2svYXp1cmUvc2NzaTEvbHVuJGx1bikKICBsb2NhbCBzY3NpT3V0cHV0PSQobHNzY3NpKQogIGlmIFtbICRyZWFkbGlua091dHB1dCA9fiAoc2RbYS16QS1aXXsxLDJ9KSBdXTsKICB0aGVuCiAgICBsb2cgImZvdW5kIGRldmljZSBwYXRoIHVzaW5nIHJlYWRsaW5rIgogICAgZ2V0ZGV2aWNlcGF0aHJlc3VsdD0iL2Rldi8ke0JBU0hfUkVNQVRDSFsxXX0iOwogIGVsaWYgW1sgJHNjc2lPdXRwdXQgPX4gXFs1OjA6MDokbHVuXF1bXlxbXSooL2Rldi9zZFthLXpBLVpdezEsMn0pIF1dOwogIHRoZW4KICAgIGxvZyAiZm91bmQgZGV2aWNlIHBhdGggdXNpbmcgbHNzY3NpIgogICAgZ2V0ZGV2aWNlcGF0aHJlc3VsdD0ke0JBU0hfUkVNQVRDSFsxXX07CiAgZWxzZQogICAgbG9nICJsc3Njc2kgb3V0cHV0IG5vdCBhcyBleHBlY3RlZCBmb3IgJGx1biIKICAgIGV4aXQgLTE7CiAgZmkKICBsb2cgImdldGRldmljZXBhdGggZG9uZSIKCn0KCmZ1bmN0aW9uIGNyZWF0ZWx2bSgpCnsKICAKICBsb2cgImNyZWF0ZWx2bSIKCiAgbG9jYWwgbHVuc0E9KCR7MS8vLC8gfSkKICBsb2NhbCB2Z05hbWU9JDIKICBsb2NhbCBsdk5hbWU9JDMKICBsb2NhbCBtb3VudFBhdGhBPSgkezQvLywvIH0pCiAgbG9jYWwgc2l6ZUE9KCR7NS8vLC8gfSkKCiAgbG9jYWwgbHVuc0NvdW50PSR7I2x1bnNBW0BdfQogIGxvY2FsIG1vdW50UGF0aENvdW50PSR7I21vdW50UGF0aEFbQF19CiAgbG9jYWwgc2l6ZUNvdW50PSR7I3NpemVBW0BdfQogIGxvZyAiY291bnQgJGx1bnNDb3VudCAkbW91bnRQYXRoQ291bnQgJHNpemVDb3VudCIKICBpZiBbWyAkbHVuc0NvdW50IC1ndCAxIF1dCiAgdGhlbgogICAgbG9nICJjcmVhdGVsdm0gLSBjcmVhdGluZyBsdm0iCgogICAgbG9jYWwgbnVtUmFpZERldmljZXM9MAogICAgbG9jYWwgcmFpZERldmljZXM9IiIKICAgIGxvZyAibnVtIGx1bnMgJGx1bnNDb3VudCIKICAgIAogICAgZm9yICgoaT0wOyBpPGx1bnNDb3VudDsgaSsrKSkKICAgIGRvCiAgICAgIGxvZyAidHJ5aW5nIHRvIGZpbmQgZGV2aWNlIHBhdGgiCiAgICAgIGxvY2FsIGx1bj0ke2x1bnNBWyRpXX0KICAgICAgZ2V0ZGV2aWNlcGF0aCAkbHVuCiAgICAgIGxvY2FsIGRldmljZVBhdGg9JGdldGRldmljZXBhdGhyZXN1bHQ7CiAgICAgIAogICAgICBpZiBbIC1uICIkZGV2aWNlUGF0aCIgXTsKICAgICAgdGhlbgogICAgICAgIGxvZyAiIERldmljZSBQYXRoIGlzICRkZXZpY2VQYXRoIgogICAgICAgIG51bVJhaWREZXZpY2VzPSQoKG51bVJhaWREZXZpY2VzICsgMSkpCiAgICAgICAgcmFpZERldmljZXM9IiRyYWlkRGV2aWNlcyAkZGV2aWNlUGF0aCAiCiAgICAgIGVsc2UKICAgICAgICBsb2cgIm5vIGRldmljZSBwYXRoIGZvciBMVU4gJGx1biIKICAgICAgICBleGl0IC0xOwogICAgICBmaQogICAgZG9uZQoKICAgIGxvZyAibnVtOiAkbnVtUmFpZERldmljZXMgcGF0aHM6ICckcmFpZERldmljZXMnIgogICAgJChwdmNyZWF0ZSAkcmFpZERldmljZXMpCiAgICAkKHZnY3JlYXRlICR2Z05hbWUgJHJhaWREZXZpY2VzKQoKICAgIGZvciAoKGo9MDsgajxtb3VudFBhdGhDb3VudDsgaisrKSkKICAgIGRvCiAgICAgIGxvY2FsIG1vdW50UGF0aExvYz0ke21vdW50UGF0aEFbJGpdfQogICAgICBsb2NhbCBzaXplTG9jPSR7c2l6ZUFbJGpdfQogICAgICBsb2NhbCBsdk5hbWVMb2M9IiRsdk5hbWUtJGoiCiAgICAgICQobHZjcmVhdGUgLS1leHRlbnRzICRzaXplTG9jJUZSRUUgLS1zdHJpcGVzICRudW1SYWlkRGV2aWNlcyAtLW5hbWUgJGx2TmFtZUxvYyAkdmdOYW1lKQogICAgICAkKG1rZnMgLXQgeGZzIC9kZXYvJHZnTmFtZS8kbHZOYW1lTG9jKQogICAgICAkKG1rZGlyIC1wICRtb3VudFBhdGhMb2MpCiAgICAKICAgICAgYWRkdG9mc3RhYiAvZGV2LyR2Z05hbWUvJGx2TmFtZUxvYyAkbW91bnRQYXRoTG9jCiAgICBkb25lCgogIGVsc2UKICAgIGxvZyAiY3JlYXRlbHZtIC0gY3JlYXRpbmcgc2luZ2xlIGRpc2siCgogICAgbG9jYWwgbHVuPSR7bHVuc0FbMF19CiAgICBsb2NhbCBtb3VudFBhdGhMb2M9JHttb3VudFBhdGhBWzBdfQogICAgZ2V0ZGV2aWNlcGF0aCAkbHVuOwogICAgbG9jYWwgZGV2aWNlUGF0aD0kZ2V0ZGV2aWNlcGF0aHJlc3VsdDsKICAgIGlmIFsgLW4gIiRkZXZpY2VQYXRoIiBdOwogICAgdGhlbgogICAgICBsb2cgIiBEZXZpY2UgUGF0aCBpcyAkZGV2aWNlUGF0aCIKICAgICAgIyBodHRwOi8vc3VwZXJ1c2VyLmNvbS9xdWVzdGlvbnMvMzMyMjUyL2NyZWF0aW5nLWFuZC1mb3JtYXRpbmctYS1wYXJ0aXRpb24tdXNpbmctYS1iYXNoLXNjcmlwdAogICAgICAkKGVjaG8gLWUgIm5cbnBcbjFcblxuXG53IiB8IGZkaXNrICRkZXZpY2VQYXRoKSA+IC9kZXYvbnVsbAogICAgICBsb2NhbCBwYXJ0UGF0aD0iJGRldmljZVBhdGgiIjEiCiAgICAgICQobWtmcyAtdCB4ZnMgJHBhcnRQYXRoKSA+IC9kZXYvbnVsbAogICAgICAkKG1rZGlyIC1wICRtb3VudFBhdGhMb2MpCgogICAgICBhZGR0b2ZzdGFiICRwYXJ0UGF0aCAkbW91bnRQYXRoTG9jCiAgICBlbHNlCiAgICAgIGxvZyAibm8gZGV2aWNlIHBhdGggZm9yIExVTiAkbHVuIgogICAgICBleGl0IC0xOwogICAgZmkKICBmaQoKICBsb2cgImNyZWF0ZWx2bSBkb25lIgp9Cgpsb2cgJEAKCmx1bnM9IiIKbmFtZXM9IiIKcGF0aHM9IiIKc2l6ZXM9IiIKCndoaWxlIHRydWU7IApkbwogIGNhc2UgIiQxIiBpbgogICAgIi1sdW5zIikgIGx1bnM9JDI7c2hpZnQgMjtsb2cgImZvdW5kIGx1bnMiCiAgICA7OwogICAgIi1uYW1lcyIpICBuYW1lcz0kMjtzaGlmdCAyO2xvZyAiZm91bmQgbmFtZXMiCiAgICA7OwogICAgIi1wYXRocyIpICBwYXRocz0kMjtzaGlmdCAyO2xvZyAiZm91bmQgcGF0aHMiCiAgICA7OwogICAgIi1zaXplcyIpICBzaXplcz0kMjtzaGlmdCAyO2xvZyAiZm91bmQgc2l6ZXMiCiAgICA7OwogICAgKikgbG9nICJ1bmtub3duIHBhcmFtZXRlciAkMSI7c2hpZnQgMTsKICAgIDs7CiAgZXNhYwoKICBpZiBbWyAteiAiJDEiIF1dOwogIHRoZW4gCiAgICBicmVhazsgCiAgZmkKZG9uZQoKbHVuc1NwbGl0PSgke2x1bnMvLyMvIH0pCm5hbWVzU3BsaXQ9KCR7bmFtZXMvLyMvIH0pCnBhdGhzU3BsaXQ9KCR7cGF0aHMvLyMvIH0pCnNpemVzU3BsaXQ9KCR7c2l6ZXMvLyMvIH0pCgpsdW5zQ291bnQ9JHsjbHVuc1NwbGl0W0BdfQpuYW1lc0NvdW50PSR7I25hbWVzU3BsaXRbQF19CnBhdGhzQ291bnQ9JHsjcGF0aHNTcGxpdFtAXX0Kc2l6ZXNDb3VudD0keyNzaXplc1NwbGl0W0BdfQoKbG9nICJjb3VudCAkbHVuc0NvdW50ICRuYW1lc0NvdW50ICRwYXRoc0NvdW50ICRzaXplc0NvdW50IgoKaWYgW1sgJGx1bnNDb3VudCAtZXEgJG5hbWVzQ291bnQgJiYgJG5hbWVzQ291bnQgLWVxICRwYXRoc0NvdW50ICYmICRwYXRoc0NvdW50IC1lcSAkc2l6ZXNDb3VudCBdXQp0aGVuCiAgZm9yICgoaXBhcnQ9MDsgaXBhcnQ8bHVuc0NvdW50OyBpcGFydCsrKSkKICBkbwogICAgbHVuPSR7bHVuc1NwbGl0WyRpcGFydF19CiAgICBuYW1lPSR7bmFtZXNTcGxpdFskaXBhcnRdfQogICAgcGF0aD0ke3BhdGhzU3BsaXRbJGlwYXJ0XX0KICAgIHNpemU9JHtzaXplc1NwbGl0WyRpcGFydF19CgogICAgbG9nICJjcmVhdGluZyBkaXNrIHdpdGggJGx1biAkbmFtZSAkcGF0aCAkc2l6ZSIKICAgIGNyZWF0ZWx2bSAkbHVuICJ2Zy0kbmFtZSIgImx2LSRuYW1lIiAiJHBhdGgiICIkc2l6ZSI7CiAgZG9uZQplbHNlCiAgbG9nICJjb3VudCBub3QgZXF1YWwiCmZpCgpleGl0"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('images')[parameters('osType')].publisher]",
                        "offer": "[variables('images')[parameters('osType')].offer]",
                        "sku": "[variables('images')[parameters('osType')].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(parameters('hVMName'), '-', copyIndex(), '-osdisk')]",
                        "caching": "[variables('hOSDiskCaching')]",
                        "createOption": "FromImage",
                        "diskSizeGB":64,
                        "managedDisk": {
                            "storageAccountType": "[variables('hOSDiskStorageType')]"
                        }
                    },
                    "dataDisks": "[variables('sizes')[parameters('size')].hana.disks]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('hNICName'), '-', copyIndex()))]",
                            "properties":
                            {
                                "primary": true
                            }
                        },
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('hNICNameSR'), '-', copyIndex()))]",
                            "properties":
                            {
                                "primary": false
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('hVMName'), '-', copyIndex(), '/', 'CustomScript')]",
            "apiVersion": "2017-12-01",
            "copy": {
                "name": "hCSELoop",
                "count": "[parameters('nodeCount')]"
            },
            "location": "[parameters('location')]",
            "dependsOn": [
                "hVMLoop"
            ],
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [],
                    "commandToExecute": "[concat('while [ ! -f /var/lib/waagent/CustomData ]; do sleep 1; done;sleep 10;cat /var/lib/waagent/CustomData | base64 --decode | sh -s -- ', variables('sizes')[parameters('size')].hana.scriptArguments)]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[parameters('appAVSetName')]",
            "apiVersion": "2017-03-30",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Aligned"
            },
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 20
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('appNICName'), '-', copyIndex())]",
            "apiVersion": "2017-06-01",
            "copy": {
                "name": "appNICLoop",
                "count": "[variables('appvmCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[parameters('location')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[variables('sizes')[parameters('size')].apps.useFastNetwork]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('appVMName'), '-', copyIndex())]",
            "copy": {
                "name": "appVMLoop",
                "count": "[variables('appvmCount')]"
            },
            "dependsOn": [
                "appNICLoop",
                "[concat('Microsoft.Compute/availabilitySets/', parameters('appAVSetName'))]"
            ],
            "apiVersion": "2017-12-01",
            "location": "[parameters('location')]",
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('appAVSetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('sizes')[parameters('size')].apps.vmSize]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('appVMName'), '-', copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "[if(equals(length(parameters('sshKeyData')), 0), bool('false'), bool('true'))]",
                        "ssh": {
                            "publicKeys": "[variables('sshKeysArray')]"
                        }
                    },
                    "customData": "IyEvYmluL2Jhc2gKCmZ1bmN0aW9uIGxvZygpCnsKICBtZXNzYWdlPSRACiAgZWNobyAiJG1lc3NhZ2UiCiAgZWNobyAiJG1lc3NhZ2UiID4+IC92YXIvbG9nL3NhcGNvbmZpZ2NyZWF0ZQp9Cgpsb2cgJEA="
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('images')[parameters('osType')].publisher]",
                        "offer": "[variables('images')[parameters('osType')].offer]",
                        "sku": "[variables('images')[parameters('osType')].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(parameters('appVMName'), '-', copyIndex(), '-osdisk')]",
                        "caching": "[variables('appOSDiskCaching')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('appOSDiskStorageType')]"
                        }
                    },
                    "dataDisks": "[variables('sizes')[parameters('size')].apps.disks]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('appNICName'), '-', copyIndex()))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('appVMName'), '-', copyIndex(), '/', 'CustomScript')]",
            "apiVersion": "2017-12-01",
            "copy": {
                "name": "appCSELoop",
                "count": "[variables('appvmCount')]"
            },
            "location": "[parameters('location')]",
            "dependsOn": [
                "appVMLoop"
            ],
            "tags": {
                "provider": "[toUpper(parameters('_SUSETags').provider)]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [],
                    "commandToExecute": "[concat('while [ ! -f /var/lib/waagent/CustomData ]; do sleep 1; done;sleep 10;cat /var/lib/waagent/CustomData | base64 --decode | sh -s -- ', variables('sizes')[parameters('size')].apps.scriptArguments)]"
                }
            }
        }
    ]
}