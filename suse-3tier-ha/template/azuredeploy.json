{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "sapSystemId": {
            "type": "string",
            "defaultValue": "TST"
        },
        "osType": {
            "type": "string",
            "allowedValues": [
                "SLES for SAP 12 SP3 (Premium)"
            ],
            "defaultValue": "SLES for SAP 12 SP3 (Premium)",
            "metadata": {
                "description": "The type of the operating system you want to deploy."
            }
        },
        "size": {
            "type": "string",
            "allowedValues": [
                "Demo",
                "Small",
                "Medium",
                "Large"
            ],
            "defaultValue": "Demo",
            "metadata": {
                "description": "The type of the operating system you want to deploy."
            }
        },
        "stackType": {
            "type": "string",
            "allowedValues": [
                "ABAP",
                "JAVA",
                "ABAP+JAVA"
            ],
            "defaultValue": "ABAP+JAVA",
            "metadata": {
                "description": "The type of the operating system you want to deploy."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "sapadmin",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "minLength": 12,
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "subnetId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The id of the subnet you want to use."
            }
        },
        "addressPrefix": {
            "defaultValue": "10.0.0.0/16",
            "type": "string"
        },
        "subnetName": {
            "defaultValue": "subnet",
            "type": "string"
        },
        "subnetPrefix": {
            "defaultValue": "10.0.0.0/24",
            "type": "string"
        },
        "nsgName": {
            "defaultValue": "nsg",
            "type": "string"
        },
        "vnetName": {
            "defaultValue": "vnet",
            "type": "string"
        },
        //
        // APP parameters
        //
        "appAVSetName": {
            "defaultValue": "app-av",
            "type": "string"
        },
        "appPIPName": {
            "defaultValue": "app-pip",
            "type": "string"
        },
        "appNICName": {
            "defaultValue": "app-nic",
            "type": "string"
        },
        "appVMName": {
            "defaultValue": "app-vm",
            "type": "string"
        },
        "appCustomData": {
            "type": "string"
        },
        //
        // ASCS parameters
        //
        "xscsAVSetName": {
            "defaultValue": "sap-av",
            "type": "string"
        },
        "xscsPIPName": {
            "defaultValue": "sap-pip",
            "type": "string"
        },
        "xscsNICName": {
            "defaultValue": "sap-nic",
            "type": "string"
        },
        "xscsLoadBalancerName": {
            "defaultValue": "sap-lb",
            "type": "string"
        },
        "xscsVMName": {
            "defaultValue": "sap-vm",
            "type": "string"
        },
        "ascsInstanceNumber": {
            "defaultValue": 0,
            "type": "int"
        },
        "ascsInstanceNumberERS": {
            "defaultValue": 10,
            "type": "int"
        },
        "scsInstanceNumber": {
            "defaultValue": 1,
            "type": "int"
        },
        "scsInstanceNumberERS": {
            "defaultValue": 11,
            "type": "int"
        },
        "xscsCustomData": {
            "type": "string"
        },
        //
        // HANA parameters
        //
        "hAVSetName": {
            "defaultValue": "hana-av",
            "type": "string"
        },
        "hPIPName": {
            "defaultValue": "hana-pip",
            "type": "string"
        },
        "hNICName": {
            "defaultValue": "hana-nic",
            "type": "string"
        },
        "hLoadBalancerName": {
            "defaultValue": "hana-lb",
            "type": "string"
        },
        "hVMName": {
            "defaultValue": "hana-vm",
            "type": "string"
        },
        "dbInstanceNumber": {
            "defaultValue": 50,
            "type": "int"
        },
        "hanaCustomData": {
            "defaultValue": "hana-vm",
            "type": "string"
        },
        //
        // NFS parameters
        //
        "nfsAVSetName": {
            "defaultValue": "nfs-av",
            "type": "string"
        },
        "nfsPIPName": {
            "defaultValue": "nfs-pip",
            "type": "string"
        },
        "nfsNICName": {
            "defaultValue": "nfs-nic",
            "type": "string"
        },
        "nfsLoadBalancerName": {
            "defaultValue": "nfs-lb",
            "type": "string"
        },
        "nfsVMName": {
            "defaultValue": "nfs-vm",
            "type": "string"
        },
        "nfsCustomData": {
            "defaultValue": "hana-vm",
            "type": "string"
        },
        "nfsVirtualHostname": {
            "defaultValue": "sap-nfs",
            "type": "string"
        }
    },
    "variables": {
        "subnetConfigs": {
            "true": {
                "subnet": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
            },
            "false": {
                "subnet": "[parameters('subnetId')]"
            }
        },
        "internalSubnetId": "[variables('subnetConfigs')[string(equals(length(parameters('subnetId')), 0))].subnet]",
        "lbrulePrefix": "lb-",
        "images": {
            "SLES for SAP 12 SP3 (Premium)": {
                "sku": "12-SP3",
                "offer": "SLES-SAP",
                "publisher": "SUSE",
                "version": "latest",
                "OSType": "Linux"
            }
        },
        "sizes": {
            "Demo": {
                "hana": {
                    "vmSize": "Standard_D4s_v3",
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 1,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 2,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 3,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        },
                        {
                            "lun": 4,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "-luns '0,1#2,3#4' -names 'data#log#shared' -paths '/hana/data#/hana/log#/hana/shared'",
                    "useFastNetwork": false
                },
                "xscs": {
                    "vmSize": "Standard_D2s_v3",
                    "disks": [],
                    "scriptArguments": "-luns",
                    "useFastNetwork": false
                },
                "apps": {
                    "vmSize": "Standard_D2s_v3",
                    "vmCount": 2,
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "[concat('-luns 0 -names sap -paths /usr/sap/', parameters('sapSystemId'))]",
                    "useFastNetwork": false
                }
            },
            "Small": {
                "hana": {
                    "vmSize": "Standard_E64s_v3",
                    // 442368 MB Memory
                    // data: 4 * Memory = 1769472MB; 400MB/s
                    // log:  1 * Memory = 442368 MB; 250MB/s
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 1,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 2,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 3,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 4,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 5,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 6,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 7,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 8,
                            "createOption": "Empty",
                            "diskSizeGB": 256
                        },
                        {
                            "lun": 9,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "-luns '0,1,2,3,4,5,6#7,8#9' -names 'data#log#shared' -paths '/hana/data#/hana/log#/hana/shared'",
                    "useFastNetwork": true
                },
                "xscs": {
                    "vmSize": "Standard_D2s_v3",
                    "disks": [],
                    "scriptArguments": "-luns",
                    "useFastNetwork": false
                },
                "apps": {
                    "vmSize": "Standard_E64s_v3",
                    "vmCount": 6,
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "[concat('-luns 0 -names sap -paths /usr/sap/', parameters('sapSystemId'))]",
                    "useFastNetwork": true
                }
            },
            "Medium": {
                "hana": {
                    "vmSize": "Standard_M64s",
                    // 1024000 MB Memory
                    // data: 4 * Memory = 4096000 MB; 400MB/s
                    // log:  1 * Memory = 1024000 MB; 250MB/s
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 2048
                        },
                        {
                            "lun": 1,
                            "createOption": "Empty",
                            "diskSizeGB": 2048
                        },
                        {
                            "lun": 2,
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 3,
                            "createOption": "Empty",
                            "diskSizeGB": 512
                        },
                        {
                            "lun": 4,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "-luns '0,1#2,3#4' -names 'data#log#shared' -paths '/hana/data#/hana/log#/hana/shared'",
                    "useFastNetwork": true
                },
                "xscs": {
                    "vmSize": "Standard_D2s_v3",
                    "disks": [],
                    "scriptArguments": "-luns",
                    "useFastNetwork": false
                },
                "apps": {
                    "vmSize": "Standard_E64s_v3",
                    "vmCount": 10,
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "[concat('-luns 0 -names sap -paths /usr/sap/', parameters('sapSystemId'))]",
                    "useFastNetwork": true
                }
            },
            "Large": {
                "hana": {
                    "vmSize": "Standard_M128s",
                    // 2048000 MB Memory
                    // data: 4 * Memory = 8192000 MB; 400MB/s
                    // log:  1 * Memory = 2048000 MB; 250MB/s
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 4095
                        },
                        {
                            "lun": 1,
                            "createOption": "Empty",
                            "diskSizeGB": 4095
                        },
                        {
                            "lun": 2,
                            "createOption": "Empty",
                            "diskSizeGB": 2048
                        },
                        {
                            "lun": 4,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "-luns '0,1#2#3' -names 'data#log#shared' -paths '/hana/data#/hana/log#/hana/shared'",
                    "useFastNetwork": true
                },
                "xscs": {
                    "vmSize": "Standard_D2s_v3",
                    "disks": [],
                    "scriptArguments": "-luns",
                    "useFastNetwork": false
                },
                "apps": {
                    "vmSize": "Standard_E64s_v3",
                    "vmCount": 12,
                    "disks": [
                        {
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 128
                        }
                    ],
                    "scriptArguments": "[concat('-luns 0 -names sap -paths /usr/sap/', parameters('sapSystemId'))]",
                    "useFastNetwork": true
                }
            }
        },
        "lbIdleTimeoutInMinutes": 30,
        //
        // APP variables
        //        
        "appvmCount": "[variables('sizes')[parameters('size')].apps.vmCount]",
        "appOSDiskCaching": "ReadWrite",
        "appOSDiskStorageType": "Premium_LRS",
        //
        // ASCS variables
        //        
        "ersLoadBalancerFrontend": "ersfrontend",
        "ersBackendPool": "ersbackend",
        "ersProbePort": "ersprobe",
        "ersProbePortInternal": "[add(62100, parameters('ascsInstanceNumberERS'))]",
        "xscsLoadBalancerFrontend": "xscsfrontend",
        "xscsBackendPool": "xscsbackend",
        "xscsProbePort": "xscsprobe",
        "xscsProbePortInternal": "[add(62000, parameters('ascsInstanceNumber'))]",
        "xscsvmCount": 2,
        "xscsOSDiskCaching": "ReadWrite",
        "xscsOSDiskStorageType": "Premium_LRS",
        "ascsLoadBalancingRulesERS": [
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3300, parameters('ascsInstanceNumberERS'))]",
                    "backendPort": "[add(3300, parameters('ascsInstanceNumberERS'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '33', padLeft(parameters('ascsInstanceNumberERS'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50013, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50013, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumberERS'), 2, '0'), '13')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50014, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50014, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumberERS'), 2, '0'), '14')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50016, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50016, mul(parameters('ascsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumberERS'), 2, '0'), '16')]"
            }
        ],
        "scsLoadBalancingRulesERS": [
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3300, parameters('scsInstanceNumberERS'))]",
                    "backendPort": "[add(3300, parameters('scsInstanceNumberERS'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '33', padLeft(parameters('scsInstanceNumberERS'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50013, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50013, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumberERS'), 2, '0'), '13')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50014, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50014, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumberERS'), 2, '0'), '14')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('ersLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('ersProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50016, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "backendPort": "[add(50016, mul(parameters('scsInstanceNumberERS'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumberERS'), 2, '0'), '16')]"
            }
        ],
        "ascsLoadBalancingRules": [
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3200, parameters('ascsInstanceNumber'))]",
                    "backendPort": "[add(3200, parameters('ascsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '32', padLeft(parameters('ascsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3600, parameters('ascsInstanceNumber'))]",
                    "backendPort": "[add(3600, parameters('ascsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '36', padLeft(parameters('ascsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3900, parameters('ascsInstanceNumber'))]",
                    "backendPort": "[add(3900, parameters('ascsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '39', padLeft(parameters('ascsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(8100, parameters('ascsInstanceNumber'))]",
                    "backendPort": "[add(8100, parameters('ascsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '81', padLeft(parameters('ascsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50013, mul(parameters('ascsInstanceNumber'), 100))]",
                    "backendPort": "[add(50013, mul(parameters('ascsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumber'), 2, '0'), '13')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50014, mul(parameters('ascsInstanceNumber'), 100))]",
                    "backendPort": "[add(50014, mul(parameters('ascsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumber'), 2, '0'), '14')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50016, mul(parameters('ascsInstanceNumber'), 100))]",
                    "backendPort": "[add(50016, mul(parameters('ascsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('ascsInstanceNumber'), 2, '0'), '16')]"
            }
        ],
        "scsLoadBalancingRules": [
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3200, parameters('scsInstanceNumber'))]",
                    "backendPort": "[add(3200, parameters('scsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '32', padLeft(parameters('scsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3300, parameters('scsInstanceNumber'))]",
                    "backendPort": "[add(3300, parameters('scsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '33', padLeft(parameters('scsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(3900, parameters('scsInstanceNumber'))]",
                    "backendPort": "[add(3900, parameters('scsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '39', padLeft(parameters('scsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(8100, parameters('scsInstanceNumber'))]",
                    "backendPort": "[add(8100, parameters('scsInstanceNumber'))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '81', padLeft(parameters('scsInstanceNumber'), 2, '0'))]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50013, mul(parameters('scsInstanceNumber'), 100))]",
                    "backendPort": "[add(50013, mul(parameters('scsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumber'), 2, '0'), '13')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50014, mul(parameters('scsInstanceNumber'), 100))]",
                    "backendPort": "[add(50014, mul(parameters('scsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumber'), 2, '0'), '14')]"
            },
            {
                "properties": {
                    "frontendIPConfiguration": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('xscsLoadBalancerName'), variables('xscsLoadBalancerFrontend'))]"
                    },
                    "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                    },
                    "probe": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('xscsLoadBalancerName'), variables('xscsProbePort'))]"
                    },
                    "protocol": "Tcp",
                    "frontendPort": "[add(50016, mul(parameters('scsInstanceNumber'), 100))]",
                    "backendPort": "[add(50016, mul(parameters('scsInstanceNumber'), 100))]",
                    "enableFloatingIP": true,
                    "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                },
                "name": "[concat(variables('lbrulePrefix'), '5', padLeft(parameters('scsInstanceNumber'), 2, '0'), '16')]"
            }
        ],
        "loadBalancingRulesERS": {
            "ABAP": "[variables('ascsLoadBalancingRulesERS')]",
            "JAVA": "[variables('scsLoadBalancingRulesERS')]",
            "ABAP+JAVA": "[concat(variables('ascsLoadBalancingRulesERS'), variables('scsLoadBalancingRulesERS'))]"
        },
        "xscsLoadBalancingRules": {
            "ABAP": "[variables('ascsLoadBalancingRules')]",
            "JAVA": "[variables('scsLoadBalancingRules')]",
            "ABAP+JAVA": "[concat(variables('ascsLoadBalancingRules'), variables('scsLoadBalancingRules'))]"
        },
        "xscsERSLoadBalancingRules": "[concat(variables('xscsLoadBalancingRules')[parameters('stackType')], variables('loadBalancingRulesERS')[parameters('stackType')])]",
        //
        // HANA variables
        //        
        "hvmCount": 2,
        "hLoadBalancerFrontend": "frontend",
        "hBackendPool": "backend",
        "hProbePort": "probe",
        "hProbePortInternal": "[add(62500, parameters('dbInstanceNumber'))]",
        "hOSDiskCaching": "ReadWrite",
        "hOSDiskStorageType": "Premium_LRS",
        //
        // NFS variables
        //
        "nfsvmCount": 2,
        "nfsLoadBalancerFrontend": "frontend",
        "nfsBackendPool": "backend",
        "nfsProbePort": "probe",
        "nfsProbePortInternal": 61000,
        "nfsOSDiskCaching": "ReadWrite",
        "nfsOSDiskStorageType": "Premium_LRS",
        "nfsScriptArguments": " -luns -node -lbip -lbname -ipnode0 -ipnode1"
    },
    "resources": [
        //
        // VNET resources
        //
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[concat(parameters('nsgName'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "condition": "[equals(length(parameters('subnetId')), 0)]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "Allow SSH Subnet",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('vnetName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', parameters('nsgName'))]"
            ],
            "condition": "[equals(length(parameters('subnetId')), 0)]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('subnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
                            }
                        }
                    }
                ]
            }
        },
        //
        // NFS resources
        //
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[parameters('nfsAVSetName')]",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformFaultDomainCount": 3,
                "platformUpdateDomainCount": 20
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[parameters('nfsLoadBalancerName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "properties": {
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        },
                        "name": "[variables('nfsLoadBalancerFrontend')]"
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('nfsBackendPool')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('nfsLoadBalancerName'), variables('nfsLoadBalancerFrontend'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('nfsLoadBalancerName'), variables('nfsBackendPool'))]"
                            },
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('nfsLoadBalancerName'), variables('nfsProbePort'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 2049,
                            "backendPort": 2049,
                            "enableFloatingIP": true,
                            "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                        },
                        "name": "[concat(variables('lbrulePrefix'), '2049T')]"
                    },
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('nfsLoadBalancerName'), variables('nfsLoadBalancerFrontend'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('nfsLoadBalancerName'), variables('nfsBackendPool'))]"
                            },
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('nfsLoadBalancerName'), variables('nfsProbePort'))]"
                            },
                            "protocol": "Udp",
                            "frontendPort": 2049,
                            "backendPort": 2049,
                            "enableFloatingIP": true,
                            "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                        },
                        "name": "[concat(variables('lbrulePrefix'), '2049U')]"
                    }
                ],
                "probes": [
                    {
                        "properties": {
                            "protocol": "Tcp",
                            "port": "[variables('nfsProbePortInternal')]",
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        },
                        "name": "[variables('nfsProbePort')]"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(parameters('nfsPIPName'), '-', copyIndex())]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nfspipLoop",
                "count": "[variables('nfsvmCount')]"
            },
            "condition": "[equals(length(parameters('subnetId')), 0)]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('nfsNICName'), '-', copyIndex())]",
            "apiVersion": "2017-06-01",
            "copy": {
                "name": "nfsNICLoop",
                "count": "[variables('nfsvmCount')]"
            },
            "dependsOn": [
                "nfspipLoop",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",
                "[concat('Microsoft.Network/loadBalancers/', parameters('nfsLoadBalancerName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": "[if(equals(length(parameters('subnetId')), 0), json(concat('{\"id\": \"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('nfsPIPName'), '-', copyIndex())) ,'\"}')), json('null'))]",
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('nfsLoadBalancerName'), variables('nfsBackendPool'))]"
                                }
                            ]
                        }
                    }
                ],
                "enableAcceleratedNetworking": false
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('nfsVMName'), '-', copyIndex())]",
            "copy": {
                "name": "nfsVMLoop",
                "count": "[variables('nfsvmCount')]"
            },
            "dependsOn": [
                "nfsNICLoop",
                "[concat('Microsoft.Compute/availabilitySets/', parameters('nfsAVSetName'))]"
            ],
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('nfsAVSetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "Standard_D2s_v3"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('nfsVMName'), '-', copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[parameters('nfsCustomData')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('images')[parameters('osType')].publisher]",
                        "offer": "[variables('images')[parameters('osType')].offer]",
                        "sku": "[variables('images')[parameters('osType')].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(parameters('nfsVMName'), '-', copyIndex(), '-osdisk')]",
                        "caching": "[variables('nfsOSDiskCaching')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('nfsOSDiskStorageType')]"
                        }
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(parameters('nfsVMName'), '-', copyIndex(), '-sap')]",
                            "lun": 0,
                            "createOption": "Empty",
                            "diskSizeGB": 32
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('nfsNICName'), '-', copyIndex()))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('nfsVMName'), '-0', '/', 'CustomScript')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "nfsVMLoop"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat('while [ ! -f /var/lib/waagent/CustomData ]; do sleep 1; done;sleep 10;cat /var/lib/waagent/CustomData | base64 --decode | sh -s --  -luns 0 -node 0 -lbip ', reference(concat('Microsoft.Network/loadBalancers/', parameters('nfsLoadBalancerName')), '2015-06-15').frontendIPConfigurations[0].properties.privateIPAddress, ' -lbname ', parameters('nfsVirtualHostname'), ' -ipnode0 ', reference(concat('Microsoft.Network/networkInterfaces/', parameters('nfsNICName'), '-0'), '2015-06-15').ipConfigurations[0].properties.privateIPAddress, ' -ipnode1 ', reference(concat('Microsoft.Network/networkInterfaces/', parameters('nfsNICName'), '-1'), '2015-06-15').ipConfigurations[0].properties.privateIPAddress, ' -hostnode0 ', parameters('nfsVMName'), '-0', ' -hostnode1 ', parameters('nfsVMName'), '-1')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('nfsVMName'), '-1', '/', 'CustomScript')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "nfsVMLoop",
                "[concat('Microsoft.Compute/virtualMachines/', parameters('nfsVMName'), '-0/extensions/CustomScript')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat('while [ ! -f /var/lib/waagent/CustomData ]; do sleep 1; done;sleep 10;cat /var/lib/waagent/CustomData | base64 --decode | sh -s --  -luns 0 -node 1 -lbip ', reference(concat('Microsoft.Network/loadBalancers/', parameters('nfsLoadBalancerName')), '2015-06-15').frontendIPConfigurations[0].properties.privateIPAddress, ' -lbname ', parameters('nfsVirtualHostname'), ' -ipnode0 ', reference(concat('Microsoft.Network/networkInterfaces/', parameters('nfsNICName'), '-0'), '2015-06-15').ipConfigurations[0].properties.privateIPAddress, ' -ipnode1 ', reference(concat('Microsoft.Network/networkInterfaces/', parameters('nfsNICName'), '-1'), '2015-06-15').ipConfigurations[0].properties.privateIPAddress, ' -hostnode0 ', parameters('nfsVMName'), '-0', ' -hostnode1 ', parameters('nfsVMName'), '-1')]"
                }
            }
        },
        //
        // XSCS resources
        //
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[parameters('xscsAVSetName')]",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformFaultDomainCount": 3,
                "platformUpdateDomainCount": 20
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[parameters('xscsLoadBalancerName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "properties": {
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        },
                        "name": "[variables('xscsLoadBalancerFrontend')]"
                    },
                    {
                        "properties": {
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        },
                        "name": "[variables('ersLoadBalancerFrontend')]"
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('xscsBackendPool')]"
                    },
                    {
                        "name": "[variables('ersBackendPool')]"
                    }
                ],
                "loadBalancingRules": "[variables('xscsERSLoadBalancingRules')]",
                "probes": [
                    {
                        "properties": {
                            "protocol": "Tcp",
                            "port": "[variables('xscsProbePortInternal')]",
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        },
                        "name": "[variables('xscsProbePort')]"
                    },
                    {
                        "properties": {
                            "protocol": "Tcp",
                            "port": "[variables('ersProbePortInternal')]",
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        },
                        "name": "[variables('ersProbePort')]"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(parameters('xscsPIPName'), '-', copyIndex())]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "xscspipLoop",
                "count": "[variables('xscsvmCount')]"
            },
            "condition": "[equals(length(parameters('subnetId')), 0)]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('xscsNICName'), '-', copyIndex())]",
            "apiVersion": "2017-06-01",
            "copy": {
                "name": "xscsNICLoop",
                "count": "[variables('xscsvmCount')]"
            },
            "dependsOn": [
                "xscspipLoop",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",
                "[concat('Microsoft.Network/loadBalancers/', parameters('xscsLoadBalancerName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": "[if(equals(length(parameters('subnetId')), 0), json(concat('{\"id\": \"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('xscsPIPName'), '-', copyIndex())) ,'\"}')), json('null'))]",
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('xscsBackendPool'))]"
                                },
                                {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('xscsLoadBalancerName'), variables('ersBackendPool'))]"
                                }
                            ]
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[variables('sizes')[parameters('size')].xscs.useFastNetwork]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('xscsVMName'), '-', copyIndex())]",
            "copy": {
                "name": "xscsVMLoop",
                "count": "[variables('xscsvmCount')]"
            },
            "dependsOn": [
                "xscsNICLoop",
                "[concat('Microsoft.Compute/availabilitySets/', parameters('xscsAVSetName'))]"
            ],
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('xscsAVSetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('sizes')[parameters('size')].xscs.vmSize]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('xscsVMName'), '-', copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[parameters('xscsCustomData')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('images')[parameters('osType')].publisher]",
                        "offer": "[variables('images')[parameters('osType')].offer]",
                        "sku": "[variables('images')[parameters('osType')].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(parameters('xscsVMName'), '-', copyIndex(), '-osdisk')]",
                        "caching": "[variables('xscsOSDiskCaching')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('xscsOSDiskStorageType')]"
                        }
                    },
                    "dataDisks": "[variables('sizes')[parameters('size')].xscs.disks]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('xscsNICName'), '-', copyIndex()))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('xscsVMName'), '-', copyIndex(), '/', 'CustomScript')]",
            "apiVersion": "2015-06-15",
            "copy": {
                "name": "xscsCSELoop",
                "count": "[variables('xscsvmCount')]"
            },
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "xscsVMLoop"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [],
                    "commandToExecute": "[concat('while [ ! -f /var/lib/waagent/CustomData ]; do sleep 1; done;sleep 10;cat /var/lib/waagent/CustomData | base64 --decode | sh -s -- ', variables('sizes')[parameters('size')].xscs.scriptArguments)]"
                }
            }
        },
        //
        // HANA resources
        //
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[parameters('hAVSetName')]",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformFaultDomainCount": 3,
                "platformUpdateDomainCount": 20
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[parameters('hLoadBalancerName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "properties": {
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        },
                        "name": "[variables('hLoadBalancerFrontend')]"
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('hBackendPool')]"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('hLoadBalancerName'), variables('hLoadBalancerFrontend'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('hLoadBalancerName'), variables('hBackendPool'))]"
                            },
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('hLoadBalancerName'), variables('hProbePort'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": "[add(30015, mul(parameters('dbInstanceNumber'), 100))]",
                            "backendPort": "[add(30015, mul(parameters('dbInstanceNumber'), 100))]",
                            "enableFloatingIP": true,
                            "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                        },
                        "name": "[concat(variables('lbrulePrefix'), '3', padLeft(parameters('dbInstanceNumber'), 2, '0'), '15')]"
                    },
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('hLoadBalancerName'), variables('hLoadBalancerFrontend'))]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('hLoadBalancerName'), variables('hBackendPool'))]"
                            },
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('hLoadBalancerName'), variables('hProbePort'))]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": "[add(30017, mul(parameters('dbInstanceNumber'), 100))]",
                            "backendPort": "[add(30017, mul(parameters('dbInstanceNumber'), 100))]",
                            "enableFloatingIP": true,
                            "idleTimeoutInMinutes": "[variables('lbIdleTimeoutInMinutes')]"
                        },
                        "name": "[concat(variables('lbrulePrefix'), '3', padLeft(parameters('dbInstanceNumber'), 2, '0'), '17')]"
                    }
                ],
                "probes": [
                    {
                        "properties": {
                            "protocol": "Tcp",
                            "port": "[variables('hProbePortInternal')]",
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        },
                        "name": "[variables('hProbePort')]"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(parameters('hPIPName'), '-', copyIndex())]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "hpipLoop",
                "count": "[variables('hvmCount')]"
            },
            "condition": "[equals(length(parameters('subnetId')), 0)]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('hNICName'), '-', copyIndex())]",
            "apiVersion": "2017-06-01",
            "copy": {
                "name": "hNICLoop",
                "count": "[variables('hvmCount')]"
            },
            "dependsOn": [
                "hpipLoop",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]",
                "[concat('Microsoft.Network/loadBalancers/', parameters('hLoadBalancerName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": "[if(equals(length(parameters('subnetId')), 0), json(concat('{\"id\": \"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('hPIPName'), '-', copyIndex())) ,'\"}')), json('null'))]",
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('hLoadBalancerName'), variables('hBackendPool'))]"
                                }
                            ]
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[variables('sizes')[parameters('size')].hana.useFastNetwork]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('hVMName'), '-', copyIndex())]",
            "copy": {
                "name": "hVMLoop",
                "count": "[variables('hvmCount')]"
            },
            "dependsOn": [
                "hNICLoop",
                "[concat('Microsoft.Compute/availabilitySets/', parameters('hAVSetName'))]"
            ],
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('hAVSetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('sizes')[parameters('size')].hana.vmSize]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('hVMName'), '-', copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[parameters('hanaCustomData')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('images')[parameters('osType')].publisher]",
                        "offer": "[variables('images')[parameters('osType')].offer]",
                        "sku": "[variables('images')[parameters('osType')].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(parameters('hVMName'), '-', copyIndex(), '-osdisk')]",
                        "caching": "[variables('hOSDiskCaching')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('hOSDiskStorageType')]"
                        }
                    },
                    "dataDisks": "[variables('sizes')[parameters('size')].hana.disks]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('hNICName'), '-', copyIndex()))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('hVMName'), '-', copyIndex(), '/', 'CustomScript')]",
            "apiVersion": "2015-06-15",
            "copy": {
                "name": "hCSELoop",
                "count": "[variables('hvmCount')]"
            },
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "hVMLoop"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [],
                    "commandToExecute": "[concat('while [ ! -f /var/lib/waagent/CustomData ]; do sleep 1; done;sleep 10;cat /var/lib/waagent/CustomData | base64 --decode | sh -s -- ', variables('sizes')[parameters('size')].hana.scriptArguments)]"
                }
            }
        },
        //
        // APP resources
        //
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[parameters('appAVSetName')]",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformFaultDomainCount": 3,
                "platformUpdateDomainCount": 20
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(parameters('appPIPName'), '-', copyIndex())]",
            "apiVersion": "2015-06-15",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "apppipLoop",
                "count": "[variables('appvmCount')]"
            },
            "condition": "[equals(length(parameters('subnetId')), 0)]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('appNICName'), '-', copyIndex())]",
            "apiVersion": "2017-06-01",
            "copy": {
                "name": "appNICLoop",
                "count": "[variables('appvmCount')]"
            },
            "dependsOn": [
                "apppipLoop",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('vnetName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": "[if(equals(length(parameters('subnetId')), 0), json(concat('{\"id\": \"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('appPIPName'), '-', copyIndex())) ,'\"}')), json('null'))]",
                            "subnet": {
                                "id": "[variables('internalSubnetId')]"
                            }
                        }
                    }
                ],
                "enableAcceleratedNetworking": "[variables('sizes')[parameters('size')].apps.useFastNetwork]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('appVMName'), '-', copyIndex())]",
            "copy": {
                "name": "appVMLoop",
                "count": "[variables('appvmCount')]"
            },
            "dependsOn": [
                "appNICLoop",
                "[concat('Microsoft.Compute/availabilitySets/', parameters('appAVSetName'))]"
            ],
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('appAVSetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('sizes')[parameters('size')].apps.vmSize]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('appVMName'), '-', copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[parameters('appCustomData')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('images')[parameters('osType')].publisher]",
                        "offer": "[variables('images')[parameters('osType')].offer]",
                        "sku": "[variables('images')[parameters('osType')].sku]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(parameters('appVMName'), '-', copyIndex(), '-osdisk')]",
                        "caching": "[variables('appOSDiskCaching')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('appOSDiskStorageType')]"
                        }
                    },
                    "dataDisks": "[variables('sizes')[parameters('size')].apps.disks]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('appNICName'), '-', copyIndex()))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('appVMName'), '-', copyIndex(), '/', 'CustomScript')]",
            "apiVersion": "2015-06-15",
            "copy": {
                "name": "appCSELoop",
                "count": "[variables('appvmCount')]"
            },
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "appVMLoop"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [],
                    "commandToExecute": "[concat('while [ ! -f /var/lib/waagent/CustomData ]; do sleep 1; done;sleep 10;cat /var/lib/waagent/CustomData | base64 --decode | sh -s -- ', variables('sizes')[parameters('size')].apps.scriptArguments)]"
                }
            }
        }
    ]
}